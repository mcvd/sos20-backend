openapi: 3.0.0
info:
  title: sos20-backend
  version: '1.0'
  description: Backend for Sohosai Online System
  termsOfService: 'https://sohosai.com'
  contact:
    url: 'https://sohosai.com'
    email: jsys@sohosai.com
servers:
  - url: 'http://localhost:8080'
paths:
  /users:
    get:
      summary: List users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/user.v1.yaml
              examples: {}
        '403':
          description: Forbidden
      operationId: get-users
      security:
        - Authorization: []
      description: List users
    post:
      summary: Create user
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/user.v1.yaml
      operationId: post-users
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                kanaName:
                  type: string
                phoneNumber:
                  type: string
                studentId:
                  type: string
                affiliationName:
                  type: string
                affiliationType:
                  $ref: ../models/affiliationtype.v1.yaml
              required:
                - name
                - kanaName
                - phoneNumber
                - studentId
                - affiliationName
                - affiliationType
      description: Create user
  '/users/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get user by id
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/user.v1.yaml
        '404':
          description: "User with userId '{id}' not found."
      operationId: get-users-id
      security:
        - Authorization: []
      description: Get user by id
  /projects:
    post:
      summary: Create project
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/project.v1.yaml
      operationId: post-projects
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                kanaName:
                  type: string
                groupName:
                  type: string
                kanaGroupName:
                  type: string
                description:
                  type: string
                category:
                  $ref: ../models/projectcategory.v1.yaml
                attributes:
                  $ref: ../models/projectattributes.v1.yaml
              required:
                - name
                - kanaName
                - groupName
                - kanaGroupName
                - description
                - category
                - attributes
      description: Create project
    get:
      summary: List projects
      operationId: get-projects
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/project.v1.yaml
        '403':
          description: Forbidden
      description: List projects
      security:
        - Authorization: []
      tags:
        - project
  /users/login:
    get:
      summary: Auth user with idToken
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/user.v1.yaml
        '401':
          description: User not found.
      operationId: get-users-login
      security:
        - Authorization: []
      description: Auth user with idToken
  /applications:
    post:
      summary: Create Application
      operationId: post-applications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/application/application.v1.yaml
        '400':
          description: Bad Request
      description: Create Application
      security:
        - Authorization: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                items:
                  type: array
                  items:
                    $ref: ../models/application/item/applicationitem.v1.yaml
                conditions:
                  $ref: ../models/application/condition/applicationconditions.v1.yaml
              required:
                - name
                - description
                - items
                - conditions
      tags:
        - application
    get:
      summary: List Applications
      operationId: get-applications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../models/application/application.v1.yaml
      security:
        - Authorization: []
      tags:
        - application
      description: List Applications
  '/users/{id}/project':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: "Get user's owning project"
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/project.v1.yaml
      operationId: get-users-id-project
      security:
        - Authorization: []
      description: "Get user's owning project"
  '/users/{id}/subown-project':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: "Get user's sub-owning project"
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/project.v1.yaml
      operationId: get-users-id-subown-project
      security:
        - Authorization: []
      description: "Get user's sub-owning project"
  '/projects/{id}':
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
    get:
      summary: Get project
      tags:
        - project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../models/project.v1.yaml
      operationId: get-projects-id
      description: Get project
      security:
        - Authorization: []
components:
  schemas: {}
  securitySchemes:
    Authorization:
      type: http
      scheme: Bearer
